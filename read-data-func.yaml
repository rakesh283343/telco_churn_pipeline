name: Read data
inputs:
- name: file_name
  type: String
outputs:
- name: df_churn_op
implementation:
  container:
    image: tensorflow/tensorflow:1.13.2-py3
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'numpy==1.17.2' 'pandas==1.0.3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m
      pip install --quiet --no-warn-script-location 'numpy==1.17.2' 'pandas==1.0.3'
      --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - "def _make_parent_dirs_and_return_path(file_path: str):\n    import os\n   \
      \ os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return file_path\n\
      \ndef read_data(file_name , df_churn_op ): \n\n    ## Import Required Libraries\n\
      \    import pandas as pd\n    import numpy as np\n\n    df_churn = pd.read_csv(file_name)\n\
      \    df_churn.to_csv(df_churn_op, index=False)\n\nimport argparse\n_parser =\
      \ argparse.ArgumentParser(prog='Read data', description='')\n_parser.add_argument(\"\
      --file-name\", dest=\"file_name\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--df-churn-op\", dest=\"df_churn_op\", type=_make_parent_dirs_and_return_path,\
      \ required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\
      _output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = read_data(**_parsed_args)\n\
      \n_output_serializers = [\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n\
      \    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n\
      \        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
    args:
    - --file-name
    - inputValue: file_name
    - --df-churn-op
    - outputPath: df_churn_op
