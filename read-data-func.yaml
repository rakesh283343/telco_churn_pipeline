name: Read data
inputs:
- name: file_name
  type: String
outputs:
- name: Output
  type: String
implementation:
  container:
    image: tensorflow/tensorflow:1.13.2-py3
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'numpy' 'pandas' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
      --no-warn-script-location 'numpy' 'pandas' --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - "def read_data(file_name )  : \n\n    ## Import Required Libraries\n    import\
      \ pandas as pd\n    import numpy as np\n\n    #This line may cause problems\
      \ as file is on the system and not inside container\n    #Importing directly\
      \ from Github Raw Content\n    df_churn = pd.read_csv(file_name)\n    df_churn\
      \ = df_churn.astype(str)\n\n    def remove_spaces(s):\n        return s.replace('\
      \ ','_')\n\n    df_churn = df_churn.applymap(remove_spaces)\n\n    #returning\
      \ df as to_csv without passing path converts it to string\n    df_str = df_churn.to_string(index=False)\n\
      \    return df_str #to_dict() #to_csv(index=False)\n\ndef _serialize_str(str_value:\
      \ str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError('Value\
      \ \"{}\" has type \"{}\" instead of str.'.format(str(str_value), str(type(str_value))))\n\
      \    return str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Read\
      \ data', description='')\n_parser.add_argument(\"--file-name\", dest=\"file_name\"\
      , type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      ----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args\
      \ = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\"\
      , [])\n\n_outputs = read_data(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers\
      \ = [\n    _serialize_str,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n\
      \    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n\
      \        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
    args:
    - --file-name
    - inputValue: file_name
    - '----output-paths'
    - outputPath: Output
