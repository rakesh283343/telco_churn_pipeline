name: Rf model
inputs:
- name: df_churn_ip
- name: n_estimators
  type: Integer
implementation:
  container:
    image: tensorflow/tensorflow:1.13.2-py3
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn==0.22.2' 'numpy==1.17.2' 'pandas==1.0.3' 'imbalanced-learn==0.6.2'
      || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn==0.22.2' 'numpy==1.17.2' 'pandas==1.0.3' 'imbalanced-learn==0.6.2'
      --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - |
      class InputPath:
          '''When creating component from function, InputPath should be used as function parameter annotation to tell the system to pass the *data file path* to the function instead of passing the actual data.'''
          def __init__(self, type=None):
              self.type = type

      def rf_model(df_churn_ip: InputPath(), n_estimators: int):
          #-> NamedTuple('Outputs', [('Cf1', int), ('Cf2', int),
           #                                                                                ('Cf3', int), ('Cf4', int)]):

          import pandas as pd
          import numpy as np
          import sklearn
          from sklearn.ensemble import RandomForestClassifier
          #from imblearn.over_sampling import SMOTE
          #from sklearn.model_selection import GridSearchCV
          from sklearn.model_selection import train_test_split
          from sklearn.metrics import confusion_matrix
          import json

          df_churn = pd.read_csv(df_churn_ip)
          print("op started")

          df1 = df_churn.loc[:,:'Churn']
          df1_int = df1[set(df1.columns)-{'tenure','MonthlyCharges','TotalCharges'}]
          df1_float = df1[['tenure','MonthlyCharges','TotalCharges']]
          df2 = df_churn.loc[:,'PaymentMethod#Bank transfer (automatic)':]

          def get_item(a):
              return int(a)

          def get_fl(a):
              return float(a)

          df1_int = df1_int.applymap(get_item)
          df1_float = df1_float.applymap(get_fl)
          df2 = df2.applymap(get_item)
          df_churn = df1_int.join(df1_float.join(df2))
          df_churn.dropna(inplace=True)

          print("Converting done")
          n_est = n_estimators

          y1 = df_churn['Churn']
          X1 = df_churn.drop(['Churn'],axis=1)

          X_train, X_test, y_train, y_test = train_test_split(X1, y1, random_state=0)

          print(X_train.dtypes)
          #converting pd datatypes to native python
          X_int = X_train[set(X_train.columns)-{'tenure','MonthlyCharges','TotalCharges'}]
          X_float = X_train[['tenure','MonthlyCharges','TotalCharges']]
          X_int = X_int.applymap(get_item)
          X_int = X_int.astype('int32')
          X_float = X_float.applymap(get_fl)
          X_float = X_float.astype('int32')
          X_train = X_int.join(X_float)

          X_int = X_test[set(X_test.columns)-{'tenure','MonthlyCharges','TotalCharges'}]
          X_float = X_test[['tenure','MonthlyCharges','TotalCharges']]
          X_int = X_int.applymap(get_item)
          X_int = X_int.astype('int32')
          X_float = X_float.applymap(get_fl)
          X_float = X_float.astype('int32')
          X_test = X_int.join(X_float)

          y_train = y_train.apply(get_item)
          y_train = y_train.astype('int32')
          y_test = y_test.apply(get_item)

          print("tt done")
          print(X_train.dtypes)
          print(y_train.dtype)
      #     sm y SMOTE(random_state=0)
      #     X_train_res, y_train_res = sm.fit_sample(X_train, y_train)
      #     X_test_res, y_test_res = sm.fit_sample(X_test, y_test)

      #     param_grid = {
      #         'n_estimators': [50, 100, 200],
      #         'max_features': ['auto', 'sqrt', 'log2'],
      #         'max_depth' : [2,4,5,6,7,8],
      #         'criterion' :['gini', 'entropy']
      #     }

          n_est = n_estimators

      #     rfc=RandomForestClassifier(random_state=42,n_estimators=n_est)
      #     gsv_rfc = GridSearchCV(estimator=rfc, param_grid=param_grid, cv= 5)
      #     rfc.fit(X_train_res, y_train_res)

          rfc_best=RandomForestClassifier(random_state=42, max_features='auto', n_estimators= 50, max_depth=8,
                                          criterion='gini')

          rfc_best.fit(X_train, y_train) #(X_train_res, y_train_res)
          #X_test_res, y_test_res = sm.fit_sample(X_test, y_test)
          y_test_pred = rfc_best.predict(X_test) #_res)
          rf_score = rfc_best.score(X_test, y_test)  #(X_test_res, y_test_res)
          conf = confusion_matrix(y_test, y_test_pred)
          print(conf)

      import argparse
      _parser = argparse.ArgumentParser(prog='Rf model', description='')
      _parser.add_argument("--df-churn-ip", dest="df_churn_ip", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--n-estimators", dest="n_estimators", type=int, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = rf_model(**_parsed_args)

      if not hasattr(_outputs, '__getitem__') or isinstance(_outputs, str):
          _outputs = [_outputs]

      _output_serializers = [

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --df-churn-ip
    - inputPath: df_churn_ip
    - --n-estimators
    - inputValue: n_estimators
