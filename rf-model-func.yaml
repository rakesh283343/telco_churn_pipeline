name: Rf model
inputs:
- name: df_churn_ip
- name: n_estimators
  type: Integer
implementation:
  container:
    image: tensorflow/tensorflow:1.13.2-py3
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn==0.22.2' 'numpy==1.17.2' 'pandas==1.0.3' 'imbalanced-learn==0.6.2'
      || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn==0.22.2' 'numpy==1.17.2' 'pandas==1.0.3' 'imbalanced-learn==0.6.2'
      --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - "class InputPath:\n    '''When creating component from function, InputPath should\
      \ be used as function parameter annotation to tell the system to pass the *data\
      \ file path* to the function instead of passing the actual data.'''\n    def\
      \ __init__(self, type=None):\n        self.type = type\n\ndef rf_model(df_churn_ip:\
      \ InputPath(), n_estimators: int):\n    import pandas as pd\n    import numpy\
      \ as np\n    import sklearn\n    from sklearn.ensemble import RandomForestClassifier\n\
      \    from sklearn.model_selection import train_test_split\n    from sklearn.metrics\
      \ import confusion_matrix\n    import json\n\n    df_churn = pd.read_csv(df_churn_ip)\n\
      \n    df_churn.dropna(inplace=True)\n    n_est = n_estimators\n\n    y1 = df_churn['Churn']\n\
      \    X1 = df_churn.drop(['Churn'],axis=1)\n\n    X_train, X_test, y_train, y_test\
      \ = train_test_split(X1, y1, random_state=0)\n    rfc_best=RandomForestClassifier(random_state=42,\
      \ max_features='auto', n_estimators= 50, max_depth=8,\n                    \
      \                criterion='gini')\n\n    rfc_best.fit(X_train, y_train) \n\
      \    y_test_pred = rfc_best.predict(X_test)\n    rf_score = rfc_best.score(X_test,\
      \ y_test)\n    conf = confusion_matrix(y_test, y_test_pred)\n\nimport argparse\n\
      _parser = argparse.ArgumentParser(prog='Rf model', description='')\n_parser.add_argument(\"\
      --df-churn-ip\", dest=\"df_churn_ip\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--n-estimators\", dest=\"n_estimators\", type=int, required=True,\
      \ default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n_output_files\
      \ = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = rf_model(**_parsed_args)\n\
      \nif not hasattr(_outputs, '__getitem__') or isinstance(_outputs, str):\n  \
      \  _outputs = [_outputs]\n\n_output_serializers = [\n\n]\n\nimport os\nfor idx,\
      \ output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n\
      \    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n\
      \        f.write(_output_serializers[idx](_outputs[idx]))\n"
    args:
    - --df-churn-ip
    - inputPath: df_churn_ip
    - --n-estimators
    - inputValue: n_estimators
