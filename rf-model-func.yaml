name: Rf model
inputs:
- name: file_name
  type: String
- name: n_estimators
  type: Integer
outputs:
- name: Cf1
  type: Integer
- name: Cf2
  type: Integer
- name: Cf3
  type: Integer
- name: Cf4
  type: Integer
implementation:
  container:
    image: tensorflow/tensorflow:1.13.2-py3
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn==0.22.2' 'numpy' 'pandas==1.0.3' 'imbalanced-learn==0.6.2' ||
      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn==0.22.2' 'numpy' 'pandas==1.0.3' 'imbalanced-learn==0.6.2' --user)
      && "$0" "$@"
    - python3
    - -u
    - -c
    - "def rf_model(file_name , n_estimators ):      \n                          \
      \                                                              \n\n    import\
      \ pandas as pd\n    import numpy as np\n    from sklearn.ensemble import RandomForestClassifier\n\
      \    from imblearn.over_sampling import SMOTE\n    from sklearn.model_selection\
      \ import GridSearchCV\n    from sklearn.model_selection import train_test_split\n\
      \    from sklearn.metrics import confusion_matrix\n\n    df_churn = pd.read_csv(file_name)\n\
      \    empty_cols=['customerID', 'gender', 'SeniorCitizen', 'Partner', 'Dependents',\n\
      \           'tenure', 'PhoneService', 'MultipleLines', 'InternetService',\n\
      \           'OnlineSecurity', 'OnlineBackup', 'DeviceProtection','TechSupport',\n\
      \           'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',\n\
      \           'PaymentMethod', 'MonthlyCharges', 'TotalCharges', 'Churn']\n\n\
      \    for i in empty_cols:\n        df_churn[i]=df_churn[i].replace(\" \",np.nan)\n\
      \n    df_churn.drop(['customerID'], axis=1, inplace=True)\n    df_churn = df_churn.dropna()\n\
      \    binary_cols = ['Partner','Dependents','PhoneService','PaperlessBilling']\n\
      \n    for i in binary_cols:\n        df_churn[i] = df_churn[i].replace({\"Yes\"\
      :1,\"No\":0})\n\n    #Encoding column 'gender'\n    df_churn['gender'] = df_churn['gender'].replace({\"\
      Male\":1,\"Female\":0})\n\n    category_cols = ['PaymentMethod','MultipleLines','InternetService','OnlineSecurity',\n\
      \                   'OnlineBackup','DeviceProtection',\n                   'TechSupport','StreamingTV','StreamingMovies','Contract']\n\
      \n    for cc in category_cols:\n        dummies = pd.get_dummies(df_churn[cc],\
      \ drop_first=False)\n        dummies = dummies.add_prefix(\"{}#\".format(cc))\n\
      \        df_churn.drop(cc, axis=1, inplace=True)\n        df_churn = df_churn.join(dummies)\n\
      \n    df_churn['Churn'] = df_churn['Churn'].replace({\"Yes\":1,\"No\":0})\n\n\
      \    y1 = df_churn['Churn']\n    X1 = df_churn.drop(['Churn'],axis=1)\n\n  \
      \  X_train, X_test, y_train, y_test = train_test_split(X1, y1, random_state=0)\n\
      \n    return (1,2,3,4)\n\ndef _serialize_int(int_value: int) -> str:\n    if\
      \ isinstance(int_value, str):\n        return int_value\n    if not isinstance(int_value,\
      \ int):\n        raise TypeError('Value \"{}\" has type \"{}\" instead of int.'.format(str(int_value),\
      \ str(type(int_value))))\n    return str(int_value)\n\nimport argparse\n_parser\
      \ = argparse.ArgumentParser(prog='Rf model', description='')\n_parser.add_argument(\"\
      --file-name\", dest=\"file_name\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--n-estimators\", dest=\"n_estimators\", type=int, required=True,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"\
      _output_paths\", type=str, nargs=4)\n_parsed_args = vars(_parser.parse_args())\n\
      _output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = rf_model(**_parsed_args)\n\
      \n_output_serializers = [\n    _serialize_int,\n    _serialize_int,\n    _serialize_int,\n\
      \    _serialize_int,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n\
      \    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n\
      \        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
    args:
    - --file-name
    - inputValue: file_name
    - --n-estimators
    - inputValue: n_estimators
    - '----output-paths'
    - outputPath: Cf1
    - outputPath: Cf2
    - outputPath: Cf3
    - outputPath: Cf4
