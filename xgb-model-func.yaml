name: Xgb model
inputs:
- name: df_churn_ip
  type: CSV
- name: n_estimators
  type: Integer
outputs:
- name: Cf1
  type: Integer
- name: Cf2
  type: Integer
- name: Cf3
  type: Integer
- name: Cf4
  type: Integer
implementation:
  container:
    image: tensorflow/tensorflow:1.13.2-py3
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn==0.22.2' 'numpy==1.17.2' 'pandas==1.0.3' 'imbalanced-learn==0.6.2'
      'xgboost==1.0.2' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
      --no-warn-script-location 'scikit-learn==0.22.2' 'numpy==1.17.2' 'pandas==1.0.3'
      'imbalanced-learn==0.6.2' 'xgboost==1.0.2' --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - |
      class InputPath:
          '''When creating component from function, InputPath should be used as function parameter annotation to tell the system to pass the *data file path* to the function instead of passing the actual data.'''
          def __init__(self, type=None):
              self.type = type

      from typing import NamedTuple

      def xgb_model(df_churn_ip: InputPath('CSV'), n_estimators: int) -> NamedTuple('Outputs', [('Cf1', int), ('Cf2', int),
                                                                                           ('Cf3', int), ('Cf4', int)]):

          import pandas as pd
          import numpy as np
          from sklearn.ensemble import RandomForestClassifier
          from imblearn.over_sampling import SMOTE
          from sklearn.model_selection import GridSearchCV
          from sklearn.model_selection import train_test_split
          from sklearn.metrics import confusion_matrix
          import xgboost as xgb

          df_churn = pd.read_csv(df_churn_ip)

          df1 = df_churn.loc[:,:'Churn']
          df1_int = df1[set(df1.columns)-{'tenure','MonthlyCharges','TotalCharges'}]
          df1_float = df1[['tenure','MonthlyCharges','TotalCharges']]
          df2 = df_churn.loc[:,'PaymentMethod#Bank transfer (automatic)':]

          def get_item(a):
              return int(a)

          def get_fl(a):
              return float(a)

          df1_int = df1_int.applymap(get_item)
          df1_float = df1_float.applymap(get_fl)
          df2 = df2.applymap(get_item)
          df_churn = df1_int.join(df1_float.join(df2))
          df_churn.dropna(inplace=True)

          n_est = n_estimators
          print("op started")
          y1 = df_churn['Churn']
          X1 = df_churn.drop(['Churn'],axis=1)

          X_train, X_test, y_train, y_test = train_test_split(X1, y1, random_state=0)

          sm = SMOTE(random_state=0)
          X_train_res, y_train_res = sm.fit_sample(X_train, y_train)
          X_test_res, y_test_res = sm.fit_sample(X_test, y_test)

          clfxg = xgb.XGBClassifier(objective='binary:logistic', verbosity=0, max_depth=2, eta = 1, silent=0)
          clfxg.fit(X_train_res, y_train_res) #, num_round, watchlist)

          y_test_pred = clfxg.predict(X_test_res)
          conf = confusion_matrix(y_test_res, y_test_pred)

          return conf[0][0], conf[0][1], conf[1][0], conf[1][1]

      def _serialize_int(int_value: int) -> str:
          if isinstance(int_value, str):
              return int_value
          if not isinstance(int_value, int):
              raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
          return str(int_value)

      import argparse
      _parser = argparse.ArgumentParser(prog='Xgb model', description='')
      _parser.add_argument("--df-churn-ip", dest="df_churn_ip", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--n-estimators", dest="n_estimators", type=int, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=4)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = xgb_model(**_parsed_args)

      if not hasattr(_outputs, '__getitem__') or isinstance(_outputs, str):
          _outputs = [_outputs]

      _output_serializers = [
          _serialize_int,
          _serialize_int,
          _serialize_int,
          _serialize_int,

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --df-churn-ip
    - inputPath: df_churn_ip
    - --n-estimators
    - inputValue: n_estimators
    - '----output-paths'
    - outputPath: Cf1
    - outputPath: Cf2
    - outputPath: Cf3
    - outputPath: Cf4
