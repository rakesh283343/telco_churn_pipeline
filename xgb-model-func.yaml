name: Xgb model
inputs:
- name: df_churn_ip
- name: n_estimators
  type: Integer
implementation:
  container:
    image: tensorflow/tensorflow:1.13.2-py3
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn==0.22.2' 'numpy==1.17.2' 'pandas==1.0.3' 'imbalanced-learn==0.6.2'
      'xgboost==1.0.2' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
      --no-warn-script-location 'scikit-learn==0.22.2' 'numpy==1.17.2' 'pandas==1.0.3'
      'imbalanced-learn==0.6.2' 'xgboost==1.0.2' --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - |
      def xgb_model(df_churn_ip , n_estimators ):

          import pandas as pd
          import numpy as np
          from sklearn.ensemble import RandomForestClassifier
          from imblearn.over_sampling import SMOTE
          from sklearn.model_selection import GridSearchCV
          from sklearn.model_selection import train_test_split
          from sklearn.metrics import confusion_matrix
          import xgboost as xgb

          df_churn = pd.read_csv(df_churn_ip)
          df_churn.dropna(inplace=True)
          n_est = n_estimators

          y1 = df_churn['Churn']
          X1 = df_churn.drop(['Churn'],axis=1)

          X_train, X_test, y_train, y_test = train_test_split(X1, y1, random_state=0)

          sm = SMOTE(random_state=0)
          X_train_res, y_train_res = sm.fit_sample(X_train, y_train)
          X_test_res, y_test_res = sm.fit_sample(X_test, y_test)

          clfxg = xgb.XGBClassifier(objective='binary:logistic', verbosity=0, max_depth=2, eta = 1, silent=0)
          clfxg.fit(X_train_res, y_train_res)

          y_test_pred = clfxg.predict(X_test_res)
          conf = confusion_matrix(y_test_res, y_test_pred)
          print(conf)

      import argparse
      _parser = argparse.ArgumentParser(prog='Xgb model', description='')
      _parser.add_argument("--df-churn-ip", dest="df_churn_ip", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--n-estimators", dest="n_estimators", type=int, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = xgb_model(**_parsed_args)

      _output_serializers = [

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --df-churn-ip
    - inputPath: df_churn_ip
    - --n-estimators
    - inputValue: n_estimators
