name: One hot encode
inputs:
- name: df_churn_ip
outputs:
- name: df_one_hot
implementation:
  container:
    image: tensorflow/tensorflow:1.13.2-py3
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn==0.22.2' 'numpy==1.17.2' 'pandas==1.0.3' 'imbalanced-learn==0.6.2'
      || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn==0.22.2' 'numpy==1.17.2' 'pandas==1.0.3' 'imbalanced-learn==0.6.2'
      --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def one_hot_encode(df_churn_ip , df_one_hot ):

          import pandas as pd
          import numpy as np

          df_churn = pd.read_csv(df_churn_ip)
          empty_cols = ['customerID', 'gender', 'SeniorCitizen', 'Partner', 'Dependents',
                 'tenure', 'PhoneService', 'MultipleLines', 'InternetService',
                 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection','TechSupport',
                 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',
                 'PaymentMethod', 'MonthlyCharges', 'TotalCharges', 'Churn']

          for i in empty_cols:
              df_churn[i]=df_churn[i].replace(" ",np.nan)

          df_churn.drop(['customerID'], axis=1, inplace=True)
          df_churn = df_churn.dropna()
          binary_cols = ['Partner','Dependents','PhoneService','PaperlessBilling']

          for i in binary_cols:
              df_churn[i] = df_churn[i].replace({"Yes":1,"No":0})

          #Encoding column 'gender'
          df_churn['gender'] = df_churn['gender'].replace({"Male":1,"Female":0})

          category_cols = ['PaymentMethod','MultipleLines','InternetService','OnlineSecurity',
                         'OnlineBackup','DeviceProtection',
                         'TechSupport','StreamingTV','StreamingMovies','Contract']

          for cc in category_cols:
              dummies = pd.get_dummies(df_churn[cc], drop_first=False)
              dummies = dummies.add_prefix("{}#".format(cc))
              df_churn.drop(cc, axis=1, inplace=True)
              df_churn = df_churn.join(dummies)

          df_churn['Churn'] = df_churn['Churn'].replace({"Yes":1,"No":0})

          df_churn.to_csv(df_one_hot, index=False)

      import argparse
      _parser = argparse.ArgumentParser(prog='One hot encode', description='')
      _parser.add_argument("--df-churn-ip", dest="df_churn_ip", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--df-one-hot", dest="df_one_hot", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = one_hot_encode(**_parsed_args)

      _output_serializers = [

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --df-churn-ip
    - inputPath: df_churn_ip
    - --df-one-hot
    - outputPath: df_one_hot
